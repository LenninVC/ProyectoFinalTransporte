@model Cibertec.Models.Itinerario


<h2>Edit</h2>
@Messages.Message("inUse", "Edit", "danger", "Este Itinerario está en uso " +
    "en este momento.")

@using (Ajax.BeginForm("Update", new { Controller = "Itinerario" },
                        new AjaxOptions
                        {
                            HttpMethod = "POST",
                            InsertionMode = InsertionMode.Replace,
                            UpdateTargetId = "modal-body",
                            OnSuccess = "itinerario.success('edit');" +
                            "itinerario.removeHubItinerario('" + @Model.IdItinerario + "');"
                        },
                        htmlAttributes: new { id = "editForm" }
                      )
        )



{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">     
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        @Html.HiddenFor(model => model.IdItinerario)

        <div class="form-group">
            @Html.LabelFor(model => model.IdConductor, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.IdConductor, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IdConductor, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Descripcion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Descripcion, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Descripcion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Origen, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Origen, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Origen, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Destino, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Destino, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Destino, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Costo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Costo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Costo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Estado, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.Estado)
                    @Html.ValidationMessageFor(model => model.Estado, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<script type="text/javascript">
    $(function () {
        $.validator.unobtrusive.parse("#editForm");
        $('#inUse').addClass('hidden');
        itinerario.addItinerario("@Model.IdItinerario");
        itinerario.validate("@Model.IdItinerario");
    });

    itinerario.closeModal = function () {
        if (!itinerario.recordInUse)
            itinerario.removeHubItinerario("@Model.IdItinerario");
    };
</script>
